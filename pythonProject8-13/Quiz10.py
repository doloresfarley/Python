# 1 Consider the list my_list = [1880, '990EZ', 'Tax Forms']
#
# . Which statement gives '990EZ' as the output?

my_list = [1880, '990EZ', 'Tax Forms']
print(my_list[1])

# Select the code that gives ['cat in a hat', 'fluffy dogs', 1989, 1990] as the output.

new_list = ['1000', '2000', '3000', 'cat in a hat', 'fluffy dogs']
print(new_list[-2:] + [1989, 1990])


# 3

new_list = [10, 'ABC', '123', 25]
my_list = new_list[:]
new_list[2] = 16
print(new_list)
print(my_list)

#4 Output
my_var = ['python']
my_list = my_var[0].split()
#print(my_list )
my_list += 'world'
del my_list[1]
print(my_list)

#5 Choose the option that gives ['ABC', 'ABC'] as the output.

my_list = ['ABC', 'DEF']
my_list[len(my_list)-1] = 'ABC'
print(my_list)

#6 Output
new_list = ['python', 'development']
new_list.append('in progress')
print(new_list)

#7 Choose the option that gives 'great' as the output.
my_list = ['books', 'are', 'great', 'for', 'learning']
my_list.sort()
print(my_list.pop(3))

# Which of the following code blocks will give 3 as the output?
my_list = [10, 10, 2, 5, 10]
print(my_list.index(10) + my_list.count(10))

#9 Choose the correct syntax to complete the code below in order to print [1, 2, 3, 4, 5] as the output.
my_list = [3, 2, 5]
my_list.extend([1, 4])
# my_list.append([1, 4]) ERROR
# my_list.insert(0, [1,4]) # ERROR ON SORT INT, LIST
my_list.sort()
# my_list.append([1, 4]) # [2, 3, 5, [1, 4]]
print(my_list)

#10  What is output?
new_list = [10, 20, 30, 40, 50]
for i in new_list:
    print(i * 2)

# Q 11

new_list = [223, 645, 500, 10, 22]
new_list.sort()
for i in new_list:
    ind = new_list.index(i)
    if ind > 0:
        new_list[ind-1] += i
print(new_list)

#Q12
new_list = [0, 1, 2, 3, 4]
print(all(new_list))
print(min(new_list) + max(new_list))

#13
new_list = [0, 1, 2, 3, 4]
avg = sum(new_list)/len(new_list)
print(f'The average is {avg}')

#14 What is output
new_list = [['abc', 'def'], 10, 20]
print(new_list[0])

#15 Given a list my_list = [[0, 1, 2], [3, 4, 5], [6, 7, 8]]
# how would you access the value 7?
my_list = [[0, 1, 2], [3, 4, 5], [6, 7, 8]]
print(my_list[2][1])

#16  Consider the lists my_list = [['The', 'Magic'] , ['Rhonda', 'Byrne']] and new_list = []
# Select the option that will produce 'The Magic : Rhonda Byrne' as the output.
my_list = [['The', 'Magic'] , ['Rhonda', 'Byrne']]
new_list = []

for i, j in enumerate(my_list):
    for item in my_list[i]:
        new_list.append(item)
print(f'{new_list[0]} {new_list[1]}: {new_list[2]} {new_list[3]}')

#17
my_list = [['a b c'], ['d e f']]
new_list = my_list[0][0].split(' ')
print(new_list[-2])

#18
my_list = [['cat in a hat'], ['Dr', 'Seuss']]
print(my_list[1][1:])

#19
new_list = [['hello', 'word'], 'good morning', 'have a nice day']
print(new_list[0:2]) # [['hello', 'word'], 'good morning']
print()
#20
my_list = [20, 25, 'hello']
new_list = my_list[:]
print(new_list[0:2])
print(my_list[-1])
print()

#21
#Choose the print statement that generates ['a', 'd'] as the output for

my_list = ['a', 'b', 'c', 'd', 'e', 'f', 'g']
print(my_list[0:-1:3])
print()
#22 What is output?
my_list = ['hello', 'good', 'morning']
print(my_list[1][:3])
print()
#q23
#What is output?

new_list =[10, 20, 30, 40]
for i in range(len(new_list)):
    if new_list[i] != new_list[-1]:
        new_list[i] *= 2
print(new_list)
print()

#24
# Which of the following code blocks produces the output given below?['odd', 'even', 'odd', 'even']
new_list = [3, 4, 5, 6]
for i in range(len(new_list)):
    if new_list[i] % 2 == 0:
        new_list[i] = 'even'
    else:
        new_list[i] = 'odd'
print(new_list) # ['odd', 'even', 'odd', 'even']

print()
# Q25 Select the output generated by the following code:

new_list = [10, 10, 20, 20, 30, 40]
for i in range(3):
    print(new_list[i])
    new_value = new_list.pop(0) # 10 20 30
print()

#Q26
new_list = [10, 20, 30, 40]
for i in new_list[:]:
    print(i)
    new_value = new_list.pop(0)
print()

#Q27
my_list = [1, 2, 3, 4]
new_list = [i**2 for i in my_list]
print(new_list)
print()

#QQ28
my_list = [['hey', 'hello', 'hi'], 'good morning']
new_list = [i + '!' for i in my_list[0]]
print(new_list) # ['hey!', 'hello!', 'hi!']
print()

#Q29 Choose the option in which the value of new_list is ['greetings'].
my_list = ['hello', 'greetings', 'hi', 'hey']
new_list = [i for i in my_list if len(i)>5]
print(new_list) #['greetings']
print()

#30 What is the value stored in new_list?
my_list = [[10, 10], [100, 100], [500, 500, 1000]]
for val in my_list:
    print(val)
    new_list = [i for i in val if i>10] # REPLACES new_list everytime!
print(new_list) #500, 500, 1000]
print()

#31 What is output?
b1 = [7, 5, 9, 6]
b1 = sorted(b1)
b2 = b1
b2.append(2)
print(b1, b2) # [5, 6, 7, 9, 2] [5, 6, 7, 9, 2]
print()

#32 What is output?
b1 = [7, 5, 9, 6]
b1.sort()
b2 = b1.copy()
b1.append(10)
b2 = b2[::-1]
print(b1, b2) # [5, 6, 7, 9, 10] [9, 7, 6, 5]

#33
#
b1 = [[7, 5, 9], [3, 2, 1]]
b1.sort()
b2 = b1[:]
''' b2 = b1[:] creates a shallow copy of b1.
 This means b2 is a new list, but the elements (the inner lists) are references to the same lists in b1.
 So, any modification to the inner lists affects both b1 and b2.'''

print(b1, b2)
'''
This loop iterates over each inner list in b2 and sorts it. 
Since b1 and b2 share the same inner lists (due to shallow copying), 
sorting elem (an inner list of b2) also affects b1.
'''
for elem in b2:
  elem.sort()
print(b1, b2) #[[3, 2, 1], [7, 5, 9]] [[3, 2, 1], [7, 5, 9]]
              # [[1, 2, 3], [5, 7, 9]] [[1, 2, 3], [5, 7, 9]]

print()
#Q34
# Which of the following options can sort the list in descending order?
# ANSWR i, ii, iii
my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

list_name = my_list
#list_name.sort(reverse=True)
print(sorted(list_name, reverse=True))
print(sorted(list_name)[::-1])
print(sorted(list_name))
#print(list_name) # TRUE

#35 What will be the date type for type(list_name.sort()) and type(sorted(list_name))
print(type(list_name.sort()) ) # <class 'NoneType'>
print(type(sorted(list_name))) # <class 'list'>